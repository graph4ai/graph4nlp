# Data
dataset: 'twitter'
val_split_ratio: 0.2 # validation set split ratio (default: 0.2)
pretrained_word_emb_name: '840B'
out_dir: 'out/twitter/graphsage_undirected_node_emb_refined_dependency_ckpt'
root_dir: 'examples/pytorch/text_classification/data/twitter'


# Graph construction
graph_type: # 'node_emb' # graph construction type ('dependency', 'constituency', 'ie', 'node_emb', 'node_emb_refined')
      - 'node_emb_refined'

# Dynamic graph construction
init_graph_type: # 'dependency' # initial graph construction type ('line', 'dependency', 'constituency', 'ie')
      - 'dependency'
gl_metric_type: 'weighted_cosine' # similarity metric type for dynamic graph construction ('weighted_cosine', 'attention', 'rbf_kernel', 'cosine')
gl_epsilon: # null # epsilon for graph sparsification
      - 0.8
      - 0.7
      - 0.6
      - 0.5
gl_top_k: null # top k for graph sparsification
gl_num_heads: # 1 # num of heads for dynamic graph construction
      # - 1
      - 2
gl_num_hidden: 300 # number of hidden units for dynamic graph construction
gl_smoothness_ratio: null # smoothness ratio for graph regularization loss
gl_sparsity_ratio: null # sparsity ratio for graph regularization loss
gl_connectivity_ratio: null # connectivity ratio for graph regularization loss
init_adj_alpha: # null # alpha ratio for combining initial graph adjacency matrix
      - 0.1
      - 0.2
      - 0.3
      - 0.4


# Graph embedding construction
word_dropout: 0.4 # word embedding dropout
      # - 0.2
      # - 0.3
      # - 0.4
      # - 0.5
rnn_dropout: 0.1 # RNN dropout
      # - 0.
      # - 0.1
      # - 0.2
      # - 0.3
no_fix_word_emb: false # Not fix pretrained word embeddings (default: false)
emb_strategy: 'w2v_bert_bilstm'

# GNN
gnn: #
      - 'graphsage'
gnn_direction_option: # 'bi_fuse' # GNN direction type ('undirected', 'bi_sep', 'bi_fuse')
      - 'undirected'
gnn_num_layers: 2 # 2 # number of GNN layers
num_hidden: 300 # number of hidden units
graph_pooling: 'avg_pool' # graph pooling ('avg_pool', 'max_pool')
max_pool_linear_proj: false # use linear projectioni for max pooling
gnn_dropout: 0.3 # 0.3 # GNN input feature dropout

# GAT
gat_attn_dropout: null # GAT attention dropout
gat_negative_slope: null # the negative slope of leaky relu
gat_num_heads: null # number of hidden attention heads
gat_num_out_heads: null # number of output attention heads
gat_residual: false # use gat_residual connection
# GraphSAGE
graphsage_aggreagte_type: 'mean' # graphsage aggreagte type ('mean', 'gcn', 'pool', 'lstm')


# Decoder
# Coverage
graph_pooling_strategy: 'max' # graph pooling strategy (null, 'mean', 'max', 'min')
dec_attention_type: 'uniform' # decoder attention type ('uniform', 'sep_diff_encoder_type', 'sep_diff_node_type')
dec_fuse_strategy: 'concatenate' # the strategy to fuse attention results generated by separate attention ('average', 'concatenate')
use_coverage: true
coverage_loss_ratio: 0.3 # coverage loss ratio
tgt_emb_as_output_layer: true # When this option is set ``True``, the output projection layer(It is used to project RNN encoded representation to target sequence)'s weight will be shared with the target vocabulary's embedding.


# Training
seed: 1234
batch_size: 50 # batch size
epochs: 500 # number of maximal training epochs
patience: 10
lr: 0.001 # learning rate
lr_patience: 2
lr_reduce_factor: 0.5
num_workers: 8 # number of data loader workers

gpu: 0
no_cuda: false

# gl_num_heads 1, gl_epsilon 0.8, 0.7, 0.6: 0.928
# gl_num_heads 2, gl_epsilon 0.8: 0.928
# TODO:
# gl_num_heads [1], gl_epsilon [0.5, 0.4]
# gl_num_heads [2], gl_epsilon [0.6 ~ 0.4]
